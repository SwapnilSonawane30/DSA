#include<iostream>
using namespace std;

class node{
    public:
    int data;
    node* left=NULL;
    node* right=NULL;
    bool isthreaded;
    node(int data){
        this->data=data;
        this->left=NULL;
        this->right=NULL;
        // this->isthreaded=false;
    }
};
class myfunctions{
    public:
        node* bintree(node*root);
        node* threadmytree(node* root);
        void inorder(node* root);
};


node* myfunctions:: bintree(node* root){
    cout<<"Enter the data: "<<endl;
    int data;
    cin>>data;
    root = new node(data);
    if(data==-1){
        return NULL;
    }
    cout<<"Enter data for inserting in left: "<<data<<endl;
    root->left=bintree(root->left);
    cout<<"Enter data for inserting in right: "<<data<<endl;
    root->right=bintree(root->right);
    return root;
}



node* myfunctions::threadmytree(node* root){
    if(root==NULL){
        return NULL;    
    }
    if(root->right==NULL&&root->left==NULL){
        return root;
    }
    if(root->left!=NULL){
        node* temp=threadmytree(root->left);
        temp->right=root; 
        temp->isthreaded=true;
    }
    if(root->right==NULL){
        return root;
    }
    return threadmytree(root->right);
}
node* leftMost(node* root)
{
	while (root != NULL && root->left != NULL)
		root = root->left;
	return root;
}
void myfunctions::inorder(node* root){ 
    if(root == NULL){
        return;
    }
    node* temp = leftMost(root);
    while(temp != NULL){ 
        cout << temp -> data <<" ";
        if(temp -> isthreaded){
            temp = temp -> right;
        }
        else{
            temp = leftMost(temp -> right);
        }
    }
}


int main(){
    node* root=NULL;
    int your_choice;
    myfunctions f1;
    while(1){
        cout<<"\n1. For Creation of bintree\n2. Thread Your tree\n3. Print Inorder\n4. Exit"<<endl;
        cout<<"Enter Your Choice : ";
        cin>>your_choice;
        switch(your_choice){
            case 1:
                root=f1.bintree(root);
                break;
            case 2:
                f1.threadmytree(root);
                break;
            case 3:
                cout<<"Inorder trversal of mytree is : ";
                f1.inorder(root);
                cout<<endl;
                break;
            case 4:
                cout<<"Programme exited successfully";
                exit(1);

        }


    }
    }
